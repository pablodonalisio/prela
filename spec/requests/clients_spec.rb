require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/clients", type: :request do
  let(:valid_attributes) {
    {name: "Gea"}
  }

  let(:invalid_attributes) {
    {name: ""}
  }

  before { sign_in create(:user) }

  describe "GET /index" do
    let!(:client1) { create(:client) }
    let!(:client2) { create(:client) }

    it "returns a successful response and displays clients" do
      get clients_path
      expect(response).to have_http_status(:success)
      expect(response.body).to include(client1.name)
      expect(response.body).to include(client2.name)
    end
  end

  describe "GET /show" do
    let(:client) { create(:client) }

    it "returns a successful response and displays the client" do
      get client_path(client)
      expect(response).to have_http_status(:success)
      expect(response.body).to include(client.name)
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_client_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      get edit_client_url(create(:client))
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Client" do
        expect {
          post clients_url, params: {client: valid_attributes}
        }.to change(Client, :count).by(1)
      end

      it "redirects to the created client" do
        post clients_url, params: {client: valid_attributes}
        expect(response).to redirect_to(clients_url)
      end

      it "creates a new Client and responds with turbo_stream" do
        post clients_path, params: {client: valid_attributes}, as: :turbo_stream
        expect(response.media_type).to eq Mime[:turbo_stream]
        expect(response.body).to include("turbo-stream action=\"append\" target=\"clients\"")
      end
    end

    context "with invalid parameters" do
      it "does not create a new Client" do
        expect {
          post clients_url, params: {client: invalid_attributes}
        }.to change(Client, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post clients_url, params: {client: invalid_attributes}
        expect(response).to have_http_status(:unprocessable_entity)
      end

      it "does not create a new Client and responds with turbo_stream" do
        post clients_path, params: {client: invalid_attributes}, as: :turbo_stream
        expect(response.media_type).to eq Mime[:turbo_stream]
        expect(response.body).to include("turbo-stream action=\"update\" target=\"remote_modal_body\"")
      end
    end
  end

  describe "PATCH /update" do
    let(:client) { create(:client) }

    context "with valid parameters" do
      let(:new_attributes) {
        {name: "New name"}
      }

      it "updates the requested client" do
        patch client_url(client), params: {client: new_attributes}
        client.reload
        expect(client.name).to eq("New name")
      end

      it "redirects to the client" do
        client = Client.create! valid_attributes
        patch client_url(client), params: {client: new_attributes}
        client.reload
        expect(response).to redirect_to(client_url(client))
      end

      it "updates the requested client and responds with turbo_stream" do
        patch client_path(client), params: {client: valid_attributes}, as: :turbo_stream
        expect(response.media_type).to eq Mime[:turbo_stream]
        expect(response.body).to include("turbo-stream action=\"replace\" target=\"client_#{client.id}\"")
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        client = Client.create! valid_attributes
        patch client_url(client), params: {client: invalid_attributes}
        expect(response).to have_http_status(:unprocessable_entity)
      end

      it "does not update the client and responds with turbo_stream" do
        patch client_path(client), params: {client: invalid_attributes}, as: :turbo_stream
        expect(response.media_type).to eq Mime[:turbo_stream]
        expect(response.body).to include("turbo-stream action=\"update\" target=\"remote_modal_body\"")
      end
    end
  end

  describe "DELETE /destroy" do
    let!(:client) { create(:client) }

    it "redirects to the clients list" do
      client = Client.create! valid_attributes
      delete client_url(client)
      expect(response).to redirect_to(clients_url)
    end

    it "destroys the requested client" do
      expect {
        delete client_url(client)
      }.to change(Client, :count).by(-1)
    end

    it "destroys the requested client and responds with turbo_stream" do
      delete client_url(client), as: :turbo_stream
      expect(response.media_type).to eq Mime[:turbo_stream]
      expect(response.body).to include("turbo-stream action=\"remove\" target=\"client_#{client.id}\"")
    end

    it "redirects to the clients list" do
      delete client_url(client)
      expect(response).to redirect_to(clients_url)
    end
  end
end
