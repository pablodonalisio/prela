require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/locations", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Location. As you add validations to Location, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {name: "Pilar"}
  }

  let(:invalid_attributes) {
    {name: ""}
  }

  let(:location) { create(:location) }

  before { sign_in create(:user) }

  describe "GET /new" do
    it "renders a successful response" do
      get new_client_location_url(create(:client))
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      location = create(:location, **valid_attributes)
      get edit_client_location_url(location.client, location)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    let(:client) { create(:client) }

    context "with valid parameters" do
      it "creates a new Location" do
        expect {
          post client_locations_url(client), params: {location: valid_attributes}
        }.to change(Location, :count).by(1)
      end

      it "redirects to the created location" do
        post client_locations_url(client), params: {location: valid_attributes}
        expect(response).to redirect_to(client_path(Location.last.client))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Location" do
        expect {
          post client_locations_url(client), params: {location: invalid_attributes}
        }.to change(Location, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post client_locations_url(client), params: {location: invalid_attributes}
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {name: "Rio cuarto"}
      }

      it "updates the requested location" do
        patch client_location_url(location.client, location), params: {location: new_attributes}
        location.reload
        expect(location.name).to eq "Rio cuarto"
      end

      it "redirects to the location" do
        patch client_location_url(location.client, location), params: {location: new_attributes}
        location.reload
        expect(response).to redirect_to(client_url(location.client))
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        patch client_location_url(location.client, location), params: {location: invalid_attributes}
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested location" do
      location
      expect {
        delete client_location_url(location.client, location)
      }.to change(Location, :count).by(-1)
    end

    it "redirects to the locations list" do
      delete client_location_url(location.client, location)
      expect(response).to redirect_to(client_url(location.client))
    end
  end
end
